version: '3.8'

services:
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - /etc/letsencrypt:/etc/letsencrypt:ro
    depends_on:
      - fastapi-app
    restart: unless-stopped
    networks:
      - app-network

  fastapi-app:
    build: .
    deploy:
      replicas: 2  # 1개 -> 2개로 확장
    expose:
      - "8000"
    environment:
      # FASTAPI용 SSL 인증서는 유지
      - FASTAPI_SSL_CERT_FILE=/etc/letsencrypt/live/43.201.185.192.nip.io/fullchain.pem
      - FASTAPI_SSL_KEY_FILE=/etc/letsencrypt/live/43.201.185.192.nip.io/privkey.pem
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - CURL_CA_BUNDLE=""
      - REQUESTS_CA_BUNDLE=""
      - PYTHONHTTPSVERIFY=0
      # OpenAI용으로는 SSL 인증서 비활성화
      - OPENAI_SSL_CERT_FILE=""
      - OPENAI_SSL_KEY_FILE=""
      # 환경 변수 기본값 설정 (개발용)
      - GOOGLEMAP_API_KEY=${GOOGLEMAP_API_KEY:-}
      - WEATHER_API_KEY=${WEATHER_API_KEY:-}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
    env_file:
      - .env
    volumes:
      - ./cache:/app/cache
      - /etc/letsencrypt:/etc/letsencrypt:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/docs"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network

  prometheus:
    image: prom/prometheus:latest
    ports:
      -  "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    depends_on:
      - fastapi-app
    networks:
      - app-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana-storage:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - app-network

  # Optional: Add PostgreSQL service for local development
  # postgres:
  #   image: postgres:15
  #   environment:
  #     POSTGRES_DB: postgres
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: password
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   networks:
  #     - app-network

networks:
  app-network:
    driver: bridge
volumes:
  grafana-storage:
# volumes:
#   postgres_data:
